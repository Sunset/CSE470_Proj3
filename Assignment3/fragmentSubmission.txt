//THIS IS FOR CHECKER FRAGMENT SHADER

#version 130   


out vec4 colorOut;
void main(void)
{


	if((mod(gl_TexCoord[0].s*10,1)<0.25))
	{
		if((mod(gl_TexCoord[0].t*10,1)<0.25)||
			((mod(gl_TexCoord[0].t*10,1)<0.75)&&
				(mod(gl_TexCoord[0].t*10,1)>0.5))||
					(mod(gl_TexCoord[0].t*10,1)>1.0))
		{
			colorOut = vec4(1.0,0.0,0.0,1.0);
		}
		else
			colorOut=vec4(1.0,1.0,1.0,1.0);		
	}
	else if((mod(gl_TexCoord[0].s*10,1)>0.25)&&(mod(gl_TexCoord[0].s*10,1)<0.5))
	{
		if((mod(gl_TexCoord[0].t*10,1)<0.25)||
			((mod(gl_TexCoord[0].t*10,1)<0.75)&&
				(mod(gl_TexCoord[0].t*10,1)>0.5))||
					(mod(gl_TexCoord[0].t*10,1)>1.0))
		{
			colorOut=vec4(1.0,1.0,1.0,1.0);		
		}
		else
			colorOut = vec4(1.0,0.0,0.0,1.0);	
	}
	else if((mod(gl_TexCoord[0].s*10,1)>0.5)&&(mod(gl_TexCoord[0].s*10,1)<0.75))
	{
		if((mod(gl_TexCoord[0].t*10,1)<0.25)||
			((mod(gl_TexCoord[0].t*10,1)<0.75)&&
				(mod(gl_TexCoord[0].t*10,1)>0.5))||
					(mod(gl_TexCoord[0].t*10,1)>1.0))
		{
			colorOut = vec4(1.0,0.0,0.0,1.0);	
		}
		else
			colorOut=vec4(1.0,1.0,1.0,1.0);		
	}
	else
	{
		if((mod(gl_TexCoord[0].t*10,1)<0.25)||
			((mod(gl_TexCoord[0].t*10,1)<0.75)&&
				(mod(gl_TexCoord[0].t*10,1)>0.5))||
					(mod(gl_TexCoord[0].t*10,1)>1.0))
		{
			colorOut=vec4(1.0,1.0,1.0,1.0);
		}
		else
			colorOut = vec4(1.0,0.0,0.0,1.0);	
	}
	
}

//THIS IS FOR STRIPES FRAGMENT SHADER
#version 130


out vec4 colorOut;
void main(void)
{

	
	if(mod(gl_TexCoord[0].s*10,1)<0.5)
	{
		colorOut = vec4(1.0,1.0,1.0,1.0);
	}
	else
		colorOut=vec4(1.0,0.0,0.0,1.0);
	
}

//THIS IS FOR THE PHONG LIGHTING FRAGMENT SHADER
#version 130
varying vec3 N;
varying vec3 v;    

uniform sampler2D color_texture;

uniform vec4 color1 = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 color2 = vec4(0.3, 0.7, 0.5, 1.0);
 
out vec4 colorOut;

void main (void)  
{  

   //Ross: Here's a hint on how to get the light source position
   gl_LightSource[0].position.xyz;   

   //Ross: V is the view direction vector and we are in Eye Coordinates, so EyePos is (0,0,0)  
	vec3 Light = normalize(gl_LightSource[0].position.xyz - v);
 	vec3 Reflect = normalize(-reflect(Light,N));
	vec3 Eye = normalize(-v);
   //calculate Ambient Term:  
	vec4 Ambient = gl_FrontLightProduct[0].ambient;
   //calculate Diffuse Term:  
   	vec4 Diffuse = gl_FrontLightProduct[0].diffuse*max(dot(N,Light),0.0);
   //calculate Specular Term:
	vec4 Specular = gl_FrontLightProduct[0].specular*pow(max(dot(Reflect,Eye),0.0),0.3*gl_FrontMaterial.shininess);
   // write Total Color:  
   colorOut = clamp((gl_FrontLightModelProduct.sceneColor+Ambient+Diffuse+Specular),0.0,1.0);
	
   //Ross: If I want to sample my texture, I need to sample it at the (s,t) coordinate of my texture coordinate
   colorOut=colorOut+texture2D(color_texture, gl_TexCoord[0].st);  

   //Ross: Generic color output is now making all geometry blue
   //colorOut = color1;


}    

//THIS IS FOR BUMP MAPPING. IT WAS AN ATTEMPT BUT I GOT THIS FROM THE BOOK.
#version 330 core

uniform vec4 SurfaceColor=vec4(0.7,0.6,0.18,1.0);
uniform float BumpDensity=16.0;
uniform float BumpSize=0.15;
uniform float SpecularFactor=0.5;

in vec3 LightDir;
in vec3 EyeDir;
in vec2 TexCoord;

out vec4 FragColor;

void main()
{
	vec3 litColor;
	vec2 c=BumpDensity * TexCoord.st;
	vec2 p = fract(c)-vec2(0.5);

	float d,f;
	d=dot(p,p);
	f = inversesqrt(d+1.0);

if(d>=BumpSize){
p=vec2(0.0);
f=1.0;
}

vec3 normDelta = vec3(p.x,p.y,1.0)*f;
litColor = SurfaceColor.rgb * max(dot(normDelta,LightDir),0.0);
vec3 reflectDir = reflect(LightDir,normDelta);

float spec = max(dot(EyeDir,reflectDir),0.0);
spec = pow(spec,6.0);
spec*= SpecularFactor;
litColor = min(litColor + spec,vec3(1.0));

FragColor = vec4(litColor,SurfaceColor.a);
}